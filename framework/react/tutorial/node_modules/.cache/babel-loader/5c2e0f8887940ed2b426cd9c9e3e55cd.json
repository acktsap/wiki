{"ast":null,"code":"var _jsxFileName = \"/Users/acktsap/workspace/git/wiki/instance/framework/react/tutorial/src/board.js\";\nimport React from 'react';\nimport './index.css';\nimport Square from './square'; // To collect data from multiple children, or to have two child components communicate with each other, you need to declare the shared state in their parent component instead\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Board extends React.Component {\n  handleClick(i) {\n    // create a copy of origin squares\n    // immutability helps react to determine when to re-render\n    const squares = this.state.squares.slice();\n\n    if (this.calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O'; // trigger re-rendering\n\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  renderSquare(i) {\n    return (\n      /*#__PURE__*/\n      // pass props\n      // the Square components are now controlled components\n      // the Board has full control over it\n      _jsxDEV(Square, {\n        value: this.props.squares[i],\n        onClick: () => this.props.handleClick(i)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n  render() {\n    /*\n      following code will be converted to\n       return React.createElement('div', {className: 'status'},\n        React.createElement('div', ...),\n        ...\n      );\n    */\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/acktsap/workspace/git/wiki/instance/framework/react/tutorial/src/board.js"],"names":["React","Square","Board","Component","handleClick","i","squares","state","slice","calculateWinner","xIsNext","setState","renderSquare","props","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAEA;;;AAEA,eAAe,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AACjDC,EAAAA,WAAW,CAACC,CAAD,EAAI;AACb;AACA;AACA,UAAMC,OAAO,GAAG,KAAKC,KAAL,CAAWD,OAAX,CAAmBE,KAAnB,EAAhB;;AAEA,QAAI,KAAKC,eAAL,CAAqBH,OAArB,KAAiCA,OAAO,CAACD,CAAD,CAA5C,EAAiD;AAC/C;AACD;;AAEDC,IAAAA,OAAO,CAACD,CAAD,CAAP,GAAa,KAAKE,KAAL,CAAWG,OAAX,GAAqB,GAArB,GAA2B,GAAxC,CATa,CAWb;;AACA,SAAKC,QAAL,CAAc;AACZL,MAAAA,OAAO,EAAEA,OADG;AAEZI,MAAAA,OAAO,EAAE,CAAC,KAAKH,KAAL,CAAWG;AAFT,KAAd;AAID;;AAEDE,EAAAA,YAAY,CAACP,CAAD,EAAI;AACd;AAAA;AACE;AACA;AACA;AACA,cAAC,MAAD;AACE,QAAA,KAAK,EAAE,KAAKQ,KAAL,CAAWP,OAAX,CAAmBD,CAAnB,CADT;AAEE,QAAA,OAAO,EAAE,MAAM,KAAKQ,KAAL,CAAWT,WAAX,CAAuBC,CAAvB;AAFjB;AAAA;AAAA;AAAA;AAAA;AAJF;AASD;;AAEDS,EAAAA,MAAM,GAAG;AACP;AACJ;AACA;AACA;AACA;AACA;AACA;AAEI,wBACE;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,mBACG,KAAKF,YAAL,CAAkB,CAAlB,CADH,EAEG,KAAKA,YAAL,CAAkB,CAAlB,CAFH,EAGG,KAAKA,YAAL,CAAkB,CAAlB,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,mBACG,KAAKA,YAAL,CAAkB,CAAlB,CADH,EAEG,KAAKA,YAAL,CAAkB,CAAlB,CAFH,EAGG,KAAKA,YAAL,CAAkB,CAAlB,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAWE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,mBACG,KAAKA,YAAL,CAAkB,CAAlB,CADH,EAEG,KAAKA,YAAL,CAAkB,CAAlB,CAFH,EAGG,KAAKA,YAAL,CAAkB,CAAlB,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD;;AA3DgD","sourcesContent":["import React from 'react';\nimport './index.css';\nimport Square from './square'\n\n// To collect data from multiple children, or to have two child components communicate with each other, you need to declare the shared state in their parent component instead\n\nexport default class Board extends React.Component {\n  handleClick(i) {\n    // create a copy of origin squares\n    // immutability helps react to determine when to re-render\n    const squares = this.state.squares.slice();\n\n    if (this.calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n\n    // trigger re-rendering\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n    }) \n  }\n\n  renderSquare(i) {\n    return (\n      // pass props\n      // the Square components are now controlled components\n      // the Board has full control over it\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.handleClick(i)}\n      />\n    )\n  }\n\n  render() {\n    /*\n      following code will be converted to\n\n      return React.createElement('div', {className: 'status'},\n        React.createElement('div', ...),\n        ...\n      );\n    */\n    return (\n      <div>\n        <div className='board-row'>\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className='board-row'>\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className='board-row'>\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    )\n  }\n\n}"]},"metadata":{},"sourceType":"module"}
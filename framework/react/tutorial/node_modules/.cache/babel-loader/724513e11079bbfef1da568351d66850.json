{"ast":null,"code":"var _jsxFileName = \"/Users/acktsap/workspace/git/wiki/instance/framework/react/tutorial/src/game.js\";\nimport React from 'react';\nimport Board from './board';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[history.length - 1]; // create a copy of origin squares\n    // immutability helps react to determine when to re-render\n\n    const squares = current.squares.slice();\n\n    if (this.calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O'; // trigger re-rendering\n\n    this.setState({\n      // concat method doesn't mutate the original array\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  calculateWinner(squares) {\n    const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n    for (let i = 0; i < lines.length; ++i) {\n      const [a, b, c] = lines[i];\n\n      if (squares[a] != null && squares[a] === squares[b] && squares[b] === squares[c]) {\n        return squares[a];\n      }\n    }\n\n    return null;\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = this.calculateWinner(current.squares);\n    let status;\n\n    if (winner != null) {\n      status = `Winner: ${winner}`;\n    } else {\n      status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\n    } // strongly recommended to assign proper keys when building dynamic lists\n\n\n    const moves = history.map((step, move) => {\n      const desc = move ? `Go to move #${move}` : 'Go to game start';\n      return (\n        /*#__PURE__*/\n        // key : to determine which component to update  \n        // it only needs to be unique between components\n        _jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.jumpTo(move),\n            children: desc\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 11\n          }, this)\n        }, move, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this)\n      );\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: current.squares,\n          onClick: i => this.handleClick(i)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/acktsap/workspace/git/wiki/instance/framework/react/tutorial/src/game.js"],"names":["React","Board","Game","Component","constructor","props","state","history","squares","Array","fill","xIsNext","handleClick","i","current","length","slice","calculateWinner","setState","concat","lines","a","b","c","render","winner","status","moves","map","step","move","desc","jumpTo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from './board';\nimport './index.css';\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xIsNext: true,\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    // create a copy of origin squares\n    // immutability helps react to determine when to re-render\n    const squares = current.squares.slice();\n\n    if (this.calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n\n    // trigger re-rendering\n    this.setState({\n      // concat method doesn't mutate the original array\n      history: history.concat([{\n        squares: squares,\n      }]),\n      xIsNext: !this.state.xIsNext,\n    }) \n  }\n\n  calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n\n    for (let i = 0; i < lines.length; ++i) {\n      const [a, b, c] = lines[i];\n      if (squares[a] != null \n          && (squares[a] === squares[b])\n          && (squares[b] === squares[c])) {\n        return squares[a];\n      }\n    }\n\n    return null;\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1]\n    const winner = this.calculateWinner(current.squares)\n\n    let status;\n    if (winner != null) {\n      status = `Winner: ${winner}`\n    } else {\n      status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\n    }\n\n    // strongly recommended to assign proper keys when building dynamic lists\n    const moves = history.map((step, move) => {\n      const desc = move ? `Go to move #${move}` : 'Go to game start';\n      return (\n        // key : to determine which component to update  \n        // it only needs to be unique between components\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    })\n\n    return (\n      <div className='game'>\n        <div className='game-board'>\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className='game-info'>\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}
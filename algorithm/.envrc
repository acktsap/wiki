function newjava() {
  if [ -z "$*" ]; then
    echo "file name is required"
    exit -1
  fi

  local origin="$*"
  local name=${origin//[[:space:]]/}
  local fileName="${name}.java"

  cat << EOF > "${fileName}"
import java.util.Objects;

/*
 * Descryption
 *
 * https://leetcode.com/problems/xxx
 *
 *
 *
 * Review
 *
 *
 */
class ${name} {
  public static void main(String[] args) {
    Object[][] parameters = new Object[][] {
      {
        new char[][] {
          { '1', '1', '1', '1', '0' },
          { '1', '1', '0', '1', '0' },
          { '1', '1', '0', '0', '0' },
          { '0', '0', '0', '0', '0' },
        },
        1
      },
    };

    var solution = new ${name}();
    for (Object[] parameter : parameters) {
      var grid = (char[][]) parameter[0];
      var expected = (int) parameter[1];

      {
        if (!Objects.equals(expected, actual)) {
          throw new IllegalStateException("Expected: " + Objects.toString(expected) +
              ", but was: " + Objects.toString(actual));
        }
      }
    }
  }
}
EOF

  echo "${fileName} is generated"
}

function newcpp() {
  if [ -z "$*" ]; then
    echo "file name is required"
    exit -1
  fi

  local origin="$*"
  local name=${origin//[[:space:]]/}
  local fileName="${name}.cpp"

  cat << EOF > "${fileName}"
#include <iostream>
#include <vector>
#include <tuple>
#include <algorithm>

using namespace std;

template <typename T>
std::ostream& operator <<(std::ostream& os, const vector<T>& elements);

template <typename T>
std::ostream& operator <<(std::ostream& os, const vector<vector<T>>& grid);

/*
 * Descryption
 *
 * https://leetcode.com/problems/xxx
 *
 *
 *
 * Review
 *
 *
 */
class ${name} {
public:
};

int main() {
  vector<tuple<int, vector<vector<int>>, vector<int>>> parameters {
    make_tuple(
        2,
        vector<vector<int>> { { 1, 0 } },
        vector<int> { 0, 1 }
    ),
    make_tuple(
        4,
        vector<vector<int>> { { 1, 0 }, { 2, 0 }, { 3, 1 }, { 3, 2 } },
        vector<int> { 0, 2, 1, 3 }
    ),
    make_tuple(
        1,
        vector<vector<int>> { },
        vector<int> { 0 }
    ),
    make_tuple(
        2,
        vector<vector<int>> { { 1, 0 }, { 0, 1 } },
        vector<int> { }
    )
  };

  ${name} solution;
  for (auto& parameter : parameters) {
    auto& numCourses = get<0>(parameter);
    auto& prerequisites = get<1>(parameter);
    auto& expected = get<2>(parameter);

    {
      if (actual != expected) {
        cout << "Expected" << endl << expected;
        cout << "Actual" << endl << actual;
        assert (false);
      }
    }
  }
}

template <typename T>
std::ostream& operator <<(std::ostream& os, const vector<T>& elements){
  if (elements.size() == 0) {
    return os;
  }

  os << elements[0];
  for (int i = 1; i < elements.size(); i++) {
      os << ", " << elements[i];
  }
  os << endl;

  return os;
}

template <typename T>
std::ostream& operator <<(std::ostream& os, const vector<vector<T>>& grid){
  for(int i = 0; i < grid.size(); i++) {
    os << grid[i][0];
    for (int j = 1; j < grid[i].size(); j++) {
        os << ", " << grid[i][j];
    }
    os << endl;
  }
  os << endl;

  return os;
}
EOF

  echo "${fileName} is generated"
}

export_function newjava
export_function newcpp
